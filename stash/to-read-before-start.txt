The error occurs because we need to properly handle YouTube OAuth authentication. Let's modify the `download_video` function and add proper OAuth handling. Here's the updated code:

```python
def get_youtube_oauth_credentials():
    creds = None
    # The file token.json stores the user's access and refresh tokens
    if os.path.exists('token.json'):
        creds = Credentials.from_authorized_user_file('token.json', SCOPES)
    
    # If there are no (valid) credentials available, let the user log in
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(CLIENT_SECRETS_FILE, SCOPES)
            creds = flow.run_local_server(port=0)
        
        # Save the credentials for the next run
        with open('token.json', 'w') as token:
            token.write(creds.to_json())
    
    return creds

def download_video(video_id, video_title):
    try:
        if not os.path.exists(DOWNLOAD_DIR):
            os.makedirs(DOWNLOAD_DIR)

        video_url = f"https://www.youtube.com/watch?v={video_id}"
        
        # Get OAuth credentials
        creds = get_youtube_oauth_credentials()
        
        # Initialize YouTube with OAuth
        yt = YouTube(
            video_url,
            use_oauth=True,
            allow_oauth_cache=True
        )
        
        # Configure the YouTube object with credentials
        yt.oauth = creds
        
        stream = yt.streams.filter(progressive=True, file_extension="mp4").order_by('resolution').desc().first()
        if stream:
            print(f"Downloading: {video_title}...")
            stream.download(output_path=DOWNLOAD_DIR, filename=f"{video_title}.mp4")
            print(f"Download complete: {video_title}\n")
        else:
            print(f"No downloadable stream found for: {video_title}\n")
    except Exception as e:
        print(f"Error downloading {video_title}: {e}\n")
```

Also, update the SCOPES variable at the top of your file to include both read and download permissions:

```python
SCOPES = [
    "https://www.googleapis.com/auth/youtube.readonly",
    "https://www.googleapis.com/auth/youtube.force-ssl",
    "https://www.googleapis.com/auth/youtube.download"
]
```

When you run the script:
1. It will open your default browser
2. You'll need to log in to your Google account
3. Grant the requested permissions
4. The authentication token will be saved locally for future use

Make sure you have the correct `client_secrets.json` file in your client-secret directory. You can get this file from the Google Cloud Console:
1. Go to [Google Cloud Console](https://console.cloud.google.com)
2. Create a new project or select an existing one
3. Enable the YouTube Data API v3
4. Create OAuth 2.0 credentials
5. Download the client secrets file and save it as `client_secrets.json`

This should resolve the authentication and download issues you're experiencing.

Similar code found with 2 license types